from pyb import Pin, ADC, Servo
from machine import SoftI2C
from motor import Motor
from time import sleep
from encoder import Encoder
import ultrasonic
from APDS9960LITE import APDS9960LITE

def clicksneeded(angle):
    from math import pi
    wheeldiameter = 65
    """diameter in mm"""
    wheelbase = 140
    """wheel base in mm"""
    angelturn = angle * pi/180
    """defines the angle we want to turn"""
    turningradius = wheelbase / 2
    cee = wheeldiameter * pi
    length = angelturn * turningradius
    total = (length/cee)*20
    return round(total)



i2c = SoftI2C(scl=Pin("PB13"), sda=Pin("PB14"))

apds9960 = APDS9960LITE(i2c)    # Create APDS9960 sensor object
apds9960.prox.enableSensor()    # Send I2C command to enable sensor


my_servo1 = Servo(1)
motor_right = Motor("left", "D6", "D7", "D4")
motor_left = Motor("right", "D8", "D9", "D5")
IR_SensorL = ADC(Pin('A3'))
IR_SensorR = ADC(Pin('A2'))
ENC_L = "D2"
ENC_R = "D3"
enc = Encoder(ENC_L, ENC_R)
TRIG = "D11"
ECHO = "D10"
ultrasonic_sensor = ultrasonic.HCSR04(TRIG, ECHO)
LPWM = 75
RPWM = 78

""" IR sensors outer as digital input"""
IR_SensorLL = ADC(Pin("A1"))    # LH outer
IR_SensorRR = ADC(Pin("A4"))    # RH outer
LReading = 0
RReading = 0
left_exits = 0
right_exits = 0
while True:

    dist = ultrasonic_sensor.distance_mm()
    motor_left.set_forwards()
    motor_right.set_forwards()
    motor_left.duty(LPWM)
    motor_right.duty(RPWM)

    """ Sets both motors forward """

    """ IR sensors outer as digital input"""
    IR_LL = IR_SensorLL.read()
    IR_RR = IR_SensorRR.read()
    IR_L = IR_SensorL.read()
    IR_R = IR_SensorR.read()
    # print(AverageL, AverageR)
    """ flip sensor to read 1(one) when line detected"""
    if IR_R > IR_L+50:
        my_servo1.angle(0)
        RPWM = 80
        LPWM = 55
        dist = ultrasonic_sensor.distance_mm()
        if 10 < dist < 180:
            motor_left.duty(0)
            motor_right.duty(0)
            enc.clear_count()
            a = 0
            b = 0
            clicks = 2*clicksneeded(120)
            while a+b < clicks:
                if a+b < clicks:
                    motor_right.set_backwards()
                    motor_left.set_forwards()
                    motor_left.duty(66)
                    motor_right.duty(68)
                    a += enc.get_left()
                    b += enc.get_right()
                    sleep(0.1)
                else:
                    motor_left.set_forwards()
                    motor_right.set_forwards()
    elif IR_L > IR_R + 50:
        my_servo1.angle(0)
        RPWM = 55
        LPWM = 80
        dist = ultrasonic_sensor.distance_mm()
        if 130 < dist < 180:
            motor_left.duty(0)
            motor_right.duty(0)
            enc.clear_count()
            a = enc.get_left()
            b = enc.get_right()
            clicks = 2*clicksneeded(120)
            while a+b < clicks:
                if a+b < clicks:
                    motor_right.set_backwards()
                    motor_left.set_forwards()
                    motor_left.duty(66)
                    motor_right.duty(68)
                    a += enc.get_left()
                    b += enc.get_right()
                    sleep(0.1)
                else:
                    motor_left.set_forwards()
                    motor_right.set_forwards()
            # while IR_L+50>IR_R:
            #     LPWM = 65
            #     RPWM = 66
            #     IR_L = IR_SensorL.read()
            #     IR_R = IR_SensorR.read()
    elif IR_LL > IR_RR+50:
        my_servo1.angle(0)
        LPWM = 55
        RPWM = 85
        while IR_LL > IR_RR+50:
            IR_LL = IR_SensorLL.read()
            IR_RR = IR_SensorRR.read()
            while IR_LL < IR_RR+50:
                left_exits += 1
                break
            print(left_exits)

    elif IR_RR > IR_LL+50:
        my_servo1.angle(20)
        LPWM = 85
        RPWM = 55
        while IR_RR > IR_LL+50:
            IR_LL = IR_SensorLL.read()
            IR_RR = IR_SensorRR.read()
            while IR_RR < IR_LL+50:
                right_exits += 1
                break
            print(right_exits)
    else:
        my_servo1.angle(90)
        dist = ultrasonic_sensor.distance_mm()
        RGB = apds9960.prox.proximityLevel
        while 50 < dist < 200:  # todo calibrate to IR range
            if dist > 120:
                # clicksneeded(90-desired_angle)      # todo calibrate to sweep direction
                LPWM = 65
                RPWM = 75
                motor_left.duty(LPWM)
                motor_right.duty(RPWM)
                dist = ultrasonic_sensor.distance_mm()
                RGB = apds9960.prox.proximityLevel
                while RGB >= 4:
                    motor_left.duty(0)
                    motor_right.duty(0)
            elif dist < 100:
                LPWM = 75
                RPWM = 65
                motor_left.duty(LPWM)
                motor_right.duty(RPWM)
                dist = ultrasonic_sensor.distance_mm()
                RGB = apds9960.prox.proximityLevel
                while RGB >= 4:
                    motor_left.duty(0)
                    motor_right.duty(0)
            break
        if RGB >= 4:
            while RGB >= 4:
                motor_left.duty(0)
                motor_right.duty(0)
                RGB = apds9960.prox.proximityLevel

    # else:
    #     LPWM = 66
    #     RPWM = 68
    #     motor_left.duty(LPWM)
    #     motor_right.duty(RPWM)
    # print(IR_LL, IR_L, IR_R, IR_RR)
