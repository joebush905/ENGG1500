from pyb import Pin, ADC, Servo
from machine import SoftI2C
from motor import Motor
from time import sleep
from encoder import Encoder
import ultrasonic
import time
from APDS9960LITE import APDS9960LITE

def clicksneeded(angle):
    from math import pi
    wheeldiameter = 65
    """diameter in mm"""
    wheelbase = 140
    """wheel base in mm"""
    angelturn = angle * pi/180
    """defines the angle we want to turn"""
    turningradius = wheelbase / 2
    cee = wheeldiameter * pi
    length = angelturn * turningradius
    total = (length/cee)*20
    return round(total)



i2c = SoftI2C(scl=Pin("PB13"), sda=Pin("PB14"))

apds9960 = APDS9960LITE(i2c)    # Create APDS9960 sensor object
apds9960.prox.enableSensor()    # Send I2C command to enable sensor


my_servo1 = Servo(1)
motor_left = Motor("left", "D6", "D7", "D4")
motor_right = Motor("right", "D8", "D9", "D5")
IR_SensorL = ADC(Pin('A3'))
IR_SensorR = ADC(Pin('A2'))
ENC_L = "D2"
ENC_R = "D3"
enc = Encoder(ENC_L, ENC_R)
TRIG = "D11"
ECHO = "D10"
ultrasonic_sensor = ultrasonic.HCSR04(TRIG, ECHO)
LPWM = 75
RPWM = 78

""" IR sensors outer as digital input"""
IR_SensorLL = Pin("A1", Pin.IN)    # LH outer
IR_SensorRR = Pin("A4", Pin.IN)    # RH outer
LReading = 0
RReading = 0


while True:
    my_servo1.angle(0)
    sleep(0.05)
    dist = ultrasonic_sensor.distance_mm()
    motor_left.set_forwards()
    motor_right.set_forwards()
    motor_left.duty(LPWM)
    motor_right.duty(RPWM)
    """ Sets both motors forward """

    """ IR sensors outer as digital input"""
    IR_LL = IR_SensorLL.value()
    IR_RR = IR_SensorRR.value()
    IR_L = IR_SensorL.read()
    IR_R = IR_SensorR.read()
    # print(AverageL, AverageR)
    """ flip sensor to read 1(one) when line detected"""
    IR_LL = 1 - IR_LL
    IR_RR = 1 - IR_RR
    if IR_R > IR_L+50:
        RPWM = 10
        LPWM = 70
    elif IR_L > IR_R + 50:
        RPWM = 70
        LPWM = 10
    elif IR_LL == 1:
        current_time = time.time()    # time variable to check if something happened in last xx seconds
        if current_time == current_time + 0.3 and IR_L == 0 and IR_R == 0:    # ADJUST TIME HERE
            RPWM = 75
            LPWM = 65
            if current_time == current_time + 0.3 and IR_LL == 1:
                break
    elif IR_RR == 1:
        current_time = time.time()  # time variable to check if something happened in last xx seconds
        if current_time == current_time + 0.3 and IR_L == 0 and IR_R == 0:  # ADJUST TIME HERE
            RPWM = 75
            LPWM = 65
            if current_time == current_time + 0.3 and IR_RR == 1:  # ADJUST TIME HERE
                break
    else:
        my_servo1.angle(90)
        dist = ultrasonic_sensor.distance_mm()
        RGB = apds9960.prox.proximityLevel
        if dist > 120:  # todo calibrate to IR range
            # clicksneeded(90-desired_angle)      # todo calibrate to sweep direction
            LPWM = 68
            RPWM = 0
            motor_left.duty(LPWM)
            motor_right.duty(RPWM)
            if RGB >= 4:
                while RGB >= 4:
                    motor_left.duty(0)
                    motor_right.duty(0)
                    RGB = apds9960.prox.proximityLevel
        elif dist < 100:
            LPWM = 0
            RPWM = 68
            motor_left.duty(LPWM)
            motor_right.duty(RPWM)
            if RGB >= 4:
                while RGB >= 4:
                    motor_left.duty(0)
                    motor_right.duty(0)
                    RGB = apds9960.prox.proximityLevel
        elif RGB >= 4:
            while RGB >= 4:
                motor_left.duty(0)
                motor_right.duty(0)
                RGB = apds9960.prox.proximityLevel
        else:
            LPWM = 66
            RPWM = 68
            motor_left.duty(LPWM)
            motor_right.duty(RPWM)
        print(RGB)
